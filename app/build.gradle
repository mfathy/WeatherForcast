apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "me.mfathy.weather.forcast"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':domain')
    implementation project(':data')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //  android support libraries
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"

    implementation "com.android.support.constraint:constraint-layout:${rootProject.ext.constraintLayoutLibVersion}"

    //  dagger
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    annotationProcessor "com.google.dagger:dagger-android-processor:${rootProject.ext.daggerLibVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerLibVersion}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.ext.daggerLibVersion}"
    implementation "com.google.dagger:dagger-android:${rootProject.ext.daggerLibVersion}"
    implementation "com.google.dagger:dagger:${rootProject.ext.daggerLibVersion}"

    //  parser
    implementation "com.google.code.gson:gson:${rootProject.ext.gsonLibVersion}"

    implementation "android.arch.lifecycle:extensions:${rootProject.ext.lifecycle_version}"
    implementation "android.arch.lifecycle:runtime:${rootProject.ext.lifecycle_version}"

    //  rxJava
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroidLibVersion}"
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxjava2LibVersion}"

    //  arrow: utilities and helper classes commonly used for mobile development
    implementation "com.fernandocejas:arrow:${rootProject.ext.arrowVersion}"

    // Dependencies for local unit tests
    testImplementation "junit:junit:${rootProject.ext.junitLibVersion}"
    testImplementation "org.mockito:mockito-all:${rootProject.ext.mockitoLibVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${rootProject.ext.hamcrestVersion}"
    testImplementation "android.arch.core:core-testing:${rootProject.ext.lifecycle_version}"
    testImplementation "com.nhaarman:mockito-kotlin:${rootProject.ext.mockitoKotlinVersion}"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:${rootProject.ext.runnerLibVersion}"
    androidTestImplementation "com.android.support.test:rules:${rootProject.ext.runnerLibVersion}"

    // Dependencies for Android unit tests
    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:${rootProject.ext.dexmakerVersion}"
    androidTestImplementation "com.google.dexmaker:dexmaker:${rootProject.ext.dexmakerVersion}"
    androidTestImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoLibVersion}"
    androidTestImplementation "junit:junit:${rootProject.ext.junitLibVersion}"

    //  UI Animator
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    // Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:support-annotations:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    androidTestImplementation "com.android.support:design:${rootProject.ext.supportLibVersion}"

}
